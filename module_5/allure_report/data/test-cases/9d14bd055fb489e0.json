{
  "uid" : "9d14bd055fb489e0",
  "name" : "test_message_disappeared_after_adding_product_to_basket",
  "fullName" : "module_5.test_product_page.TestProductPage#test_message_disappeared_after_adding_product_to_basket",
  "historyId" : "b1c3189d6400963e937a7a94e38cea78",
  "time" : {
    "start" : 1615657818269,
    "stop" : 1615657820622,
    "duration" : 2353
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL negative test\n\nselenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: x = 903 \nЧему равно log10(abs(12*sin(x)))?\nРешите задачу за 3 сек, чтобы получить скидку.\nПри успешном решении вы найдете проверочный код в консоли браузера.\nMessage: unexpected alert open: {Alert text : x = 903 \nЧему равно log10(abs(12*sin(x)))?\nРешите задачу за 3 сек, чтобы получить скидку.\nПри успешном решении вы найдете проверочный код в консоли браузера.}\n  (Session info: chrome=89.0.4389.90)",
  "statusTrace" : "self = <module_5.test_product_page.TestProductPage object at 0x0421E400>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fc43ef21400a24b2a5e380e9b02d4f09\")>\n\n    @pytest.mark.xfail(reason=\"negative test\")\n    def test_message_disappeared_after_adding_product_to_basket(self,browser):\n        # Data\n        link = \"http://selenium1py.pythonanywhere.com/catalogue/the-shellcoders-handbook_209/?promo=newYear\"\n    \n        # Arrange\n        page = ProductPage(browser, link)\n        page.open()\n    \n        # Act\n        page.add_to_basket()\n    \n        # Assert\n>       page.should_not_be_disappeared_success_msg()\n\nmodule_5\\test_product_page.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodule_5\\pages\\product_page.py:22: in should_not_be_disappeared_success_msg\n    assert self.is_disappeared(*ProductPageLocators.ADD_TO_BASKET_MSG), \\\nmodule_5\\pages\\base_page.py:24: in is_disappeared\n    WebDriverWait(self.browser, timeout, 1, TimeoutException). \\\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:88: in until_not\n    value = method(self._driver)\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: in __call__\n    return _find_element(driver, self.locator)\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:415: in _find_element\n    raise e\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x04264D60>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"x = 903 \\\\nЧему равно log10(abs(12*sin(x)))?\\\\nРешите задачу за 3 ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77658964+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77658934+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: x = 903 \nE           Чему равно log10(abs(12*sin(x)))?\nE           Решите задачу за 3 сек, чтобы получить скидку.\nE           При успешном решении вы найдете проверочный код в консоли браузера.\nE           Message: unexpected alert open: {Alert text : x = 903 \nE           Чему равно log10(abs(12*sin(x)))?\nE           Решите задачу за 3 сек, чтобы получить скидку.\nE           При успешном решении вы найдете проверочный код в консоли браузера.}\nE             (Session info: chrome=89.0.4389.90)\n\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:241: UnexpectedAlertPresentException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1615657689597,
      "stop" : 1615657689698,
      "duration" : 101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "browser",
    "time" : {
      "start" : 1615657816809,
      "stop" : 1615657818268,
      "duration" : 1459
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "language",
    "time" : {
      "start" : 1615657816808,
      "stop" : 1615657816809,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL negative test\n\nselenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: x = 903 \nЧему равно log10(abs(12*sin(x)))?\nРешите задачу за 3 сек, чтобы получить скидку.\nПри успешном решении вы найдете проверочный код в консоли браузера.\nMessage: unexpected alert open: {Alert text : x = 903 \nЧему равно log10(abs(12*sin(x)))?\nРешите задачу за 3 сек, чтобы получить скидку.\nПри успешном решении вы найдете проверочный код в консоли браузера.}\n  (Session info: chrome=89.0.4389.90)",
    "statusTrace" : "self = <module_5.test_product_page.TestProductPage object at 0x0421E400>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fc43ef21400a24b2a5e380e9b02d4f09\")>\n\n    @pytest.mark.xfail(reason=\"negative test\")\n    def test_message_disappeared_after_adding_product_to_basket(self,browser):\n        # Data\n        link = \"http://selenium1py.pythonanywhere.com/catalogue/the-shellcoders-handbook_209/?promo=newYear\"\n    \n        # Arrange\n        page = ProductPage(browser, link)\n        page.open()\n    \n        # Act\n        page.add_to_basket()\n    \n        # Assert\n>       page.should_not_be_disappeared_success_msg()\n\nmodule_5\\test_product_page.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodule_5\\pages\\product_page.py:22: in should_not_be_disappeared_success_msg\n    assert self.is_disappeared(*ProductPageLocators.ADD_TO_BASKET_MSG), \\\nmodule_5\\pages\\base_page.py:24: in is_disappeared\n    WebDriverWait(self.browser, timeout, 1, TimeoutException). \\\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:88: in until_not\n    value = method(self._driver)\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:64: in __call__\n    return _find_element(driver, self.locator)\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:415: in _find_element\n    raise e\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: in _find_element\n    return driver.find_element(*by)\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x04264D60>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"x = 903 \\\\nЧему равно log10(abs(12*sin(x)))?\\\\nРешите задачу за 3 ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77658964+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77658934+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: x = 903 \nE           Чему равно log10(abs(12*sin(x)))?\nE           Решите задачу за 3 сек, чтобы получить скидку.\nE           При успешном решении вы найдете проверочный код в консоли браузера.\nE           Message: unexpected alert open: {Alert text : x = 903 \nE           Чему равно log10(abs(12*sin(x)))?\nE           Решите задачу за 3 сек, чтобы получить скидку.\nE           При успешном решении вы найдете проверочный код в консоли браузера.}\nE             (Session info: chrome=89.0.4389.90)\n\nenvironments\\selenium_env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:241: UnexpectedAlertPresentException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1b52455ee6837fbd",
      "name" : "stdout",
      "source" : "1b52455ee6837fbd.txt",
      "type" : "text/plain",
      "size" : 16
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1615657820686,
      "stop" : 1615657822795,
      "duration" : 2109
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.xfail(reason='negative test')"
  }, {
    "name" : "parentSuite",
    "value" : "module_5"
  }, {
    "name" : "suite",
    "value" : "test_product_page"
  }, {
    "name" : "subSuite",
    "value" : "TestProductPage"
  }, {
    "name" : "host",
    "value" : "DESKTOP-0CMPFR3"
  }, {
    "name" : "thread",
    "value" : "22004-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "module_5.test_product_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ "@pytest.mark.xfail(reason='negative test')" ]
  },
  "source" : "9d14bd055fb489e0.json",
  "parameterValues" : [ ]
}